import logging
import os
import random
from aiogram import Router, F, Bot, types
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.filters import Command
from config.config import Config, load_config
from aiogram.exceptions import TelegramBadRequest
from sqlalchemy.ext.asyncio import AsyncSession
from database import Taro, NumberMagic, Compatibility, Channel, User
from sqlalchemy import select, delete
from .taro.string_taro_name import string_taro_name
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from handlers import zodiac
from datetime import datetime
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from keyboards.main_keyboard import get_start_buttons, get_exit_menu_buttons
from keyboards.zodiac_keyboard import get_zodiac_buttons
from keyboards.taro_keyboard import get_inline_taro_buttons
from keyboards.vostok_horo_keyboard import get_inline_vostok_horo_buttons
from keyboards.number_keyboard import get_inline_numbers_buttons
from keyboards.compatibility_keyboard import get_inline_compatibility_buttons
from keyboards.admin_start_keyboard import get_admin_start_buttons, get_admin_buttons, get_inline_channel_admin_buttons_delete, get_choise_media, get_end_send_ras, get_nemeling_silk

router = Router()

Config = load_config()

scheduler = AsyncIOScheduler()

logger = logging.getLogger(__name__)

class CompatibilityZodiac(StatesGroup):
    first_zodiac = State()
    second_zodiac = State()
    
class CreatePosts(StatesGroup):
    text = State()
    choise = State()
    photo = State()
    video = State()
    data1 = State()
    end = State()

@router.message(Command('start'))
async def start_cmd(msg: Message):
    if msg.from_user.id == int(Config.tg_bot.admin_id):
        await msg.answer('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, –∞–¥–º–∏–Ω!',
                         reply_markup=get_admin_start_buttons())
    else:
        main_photo = FSInputFile(r'c:\Users\–†–æ–º–∞–Ω\Pictures\Saved Pictures\photo_2023-01-18_01-40-17.jpg')
        await msg.answer_photo(main_photo, caption='–ü—Ä–∏–≤–µ—Ç! –Ø - –≥–æ—Ä–æ—Å–∫–æ–ø –±–æ—Ç ‚ú®\n\n–Ø –ø—Ä–µ–¥—Å–∫–∞–∂—É —Ç–≤–æ–π –¥–µ–Ω—å –Ω–∞ –∑–∞–≤—Ç—Ä–∞, –ø—Ä–æ–≤–µ—Ä—é –≤–∞—à—É —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º, –∞ —Ç–∞–∫–∂–µ —Å–¥–µ–ª–∞—é —Ä–∞—Å–∫–ª–∞–¥ –Ω–∞ –∫–∞—Ä—Ç–∞—Ö –¢–∞—Ä–æ üîÆ',
                        reply_markup=get_start_buttons())

@router.message(Command('horo'))
async def main_cmd(msg: Message):
    await msg.answer('üîÆ –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è',
                     reply_markup=get_zodiac_buttons())
    
@router.message(Command('taro'))
async def main_cmd(msg: Message):
    main_photo = FSInputFile(r'c:\Users\–†–æ–º–∞–Ω\Pictures\Saved Pictures\photo_2023-08-31_14-47-52.jpg')
    await msg.answer_photo(main_photo, caption='üÄÑÔ∏è –í—ã–±–µ—Ä–∏ –∫–∞—Ä—Ç—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ üëÄ',
                           reply_markup=get_inline_taro_buttons())
    
@router.message(Command('numbers'))
async def main_cmd(msg: Message):
    main_photo = FSInputFile(r'c:\Users\–†–æ–º–∞–Ω\Pictures\Saved Pictures\617bd66a70e01e4c9c0fde5475b4e632fe9dij.jpg')
    await msg.answer_photo(main_photo, caption='üü£ –ú–∞–≥–∏—è —á–∏—Å–µ–ª\n\nüé≤ –í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–µ —á–∏—Å–ª–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ –∏ –ø–æ–ª—É—á–∏—Ç–µ —Å–≤–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ',
                           reply_markup=get_inline_numbers_buttons())

@router.message(Command('eastern'))
async def main_cmd(msg: Message):
    main_photo_horo_vostok = FSInputFile(r'c:\Users\–†–æ–º–∞–Ω\Pictures\Saved Pictures\photo_2023-09-04_14-50-59.jpg')
    await msg.answer_photo(main_photo_horo_vostok, caption='üé≤ –í—ã–±–µ—Ä–µ—Ç–µ –∂–∏–≤–æ—Ç–Ω–æ–µ –ø–æ –≥–æ–¥—É –≤–∞—à–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –≥–æ–¥',
                           reply_markup=get_inline_vostok_horo_buttons())
    
@router.message(Command('compatibility'))
async def main_cmd(msg: Message, state=FSMContext):
    main_photo = FSInputFile(r'c:\Users\–†–æ–º–∞–Ω\Pictures\Saved Pictures\photo_2023-09-06_18-05-53.jpg')
    await msg.answer_photo(main_photo, caption='üíü –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å\n\n–ú–µ–∂–¥—É ___ –∏ ___\n\nüé≤ –í—ã–±–µ—Ä–∏—Ç–µ –¥–≤–∞ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞',
                           reply_markup=get_inline_compatibility_buttons())
    await state.set_state(CompatibilityZodiac.first_zodiac)
    
@router.message(Command('cancel'))
async def main_cmd(msg: Message):
    if msg.from_user.id == int(Config.tg_bot.admin_id):
        await msg.answer('üè† –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é',
                         reply_markup=get_admin_start_buttons())
    else:
        await msg.answer('üè† –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é',
                        reply_markup=get_start_buttons())

@router.message(F.text == '‚úçüèª –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞–Ω–∞–ª—ã')
async def edit_channel_cmd(msg: Message):
    if msg.from_user.id == int(Config.tg_bot.admin_id):
        await msg.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
                         reply_markup=get_admin_buttons())
        
@router.message(F.text == '‚úçüèª –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É')
async def edit_message_echo_cmd(msg: Message, state=FSMContext):
    if msg.from_user.id == int(Config.tg_bot.admin_id):
        await msg.answer('–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏')
        await state.set_state(CreatePosts.text)
        
@router.message(F.text == 'üóë –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª')
async def edit_channel_cmd(msg: Message, session: AsyncSession):
    if msg.from_user.id == int(Config.tg_bot.admin_id):
       
        silk1 = await session.execute(select(Channel.silk).where(Channel.id == 1))
        silk2 = await session.execute(select(Channel.silk).where(Channel.id == 2))
        silk3 = await session.execute(select(Channel.silk).where(Channel.id == 3))
        silk4 = await session.execute(select(Channel.silk).where(Channel.id == 4))
        silk5 = await session.execute(select(Channel.silk).where(Channel.id == 5))
        
        for silk in silk1:
            silk1 = silk[0]
        for silk in silk2:
            silk2 = silk[0]
        for silk in silk3:
            silk3 = silk[0]
        for silk in silk4:
            silk4 = silk[0]
        for silk in silk5:
            silk5 = silk[0]
        
        if str(silk1).startswith('<sqlalchemy.engine.result'):
            silk1 = '–ü—É—Å—Ç–æ'
        else:
            pass
        if str(silk2).startswith('<sqlalchemy.engine.result'):
            silk2 = '–ü—É—Å—Ç–æ'
        else:
            pass
        if str(silk3).startswith('<sqlalchemy.engine.result'):
            silk3 = '–ü—É—Å—Ç–æ'
        else:
            pass
        if str(silk4).startswith('<sqlalchemy.engine.result'):
            silk4 = '–ü—É—Å—Ç–æ'
        else:
            pass
        if str(silk5).startswith('<sqlalchemy.engine.result'):
            silk5 = '–ü—É—Å—Ç–æ'
        else:
            pass
        await session.commit()
        await msg.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è', reply_markup=get_exit_menu_buttons())
        await msg.answer(f'1. {silk1}\n2. {silk2}\n3. {silk3}\n4. {silk4}\n5. {silk5}',
                         reply_markup=get_inline_channel_admin_buttons_delete())
        

@router.message(F.text == '‚ûï –ú–æ–∏ –∫–∞–Ω–∞–ª—ã')
async def edit_channel_cmd(msg: Message, session: AsyncSession):
    if msg.from_user.id == int(Config.tg_bot.admin_id):
        silk1 = await session.execute(select(Channel.silk).where(Channel.id == 1))
        silk2 = await session.execute(select(Channel.silk).where(Channel.id == 2))
        silk3 = await session.execute(select(Channel.silk).where(Channel.id == 3))
        silk4 = await session.execute(select(Channel.silk).where(Channel.id == 4))
        silk5 = await session.execute(select(Channel.silk).where(Channel.id == 5))
        
        for silk in silk1:
            silk1 = silk[0]
        for silk in silk2:
            silk2 = silk[0]
        for silk in silk3:
            silk3 = silk[0]
        for silk in silk4:
            silk4 = silk[0]
        for silk in silk5:
            silk5 = silk[0]
        
        if str(silk1).startswith('<sqlalchemy.engine.result'):
            silk1 = '–ü—É—Å—Ç–æ'
        else:
            pass
        if str(silk2).startswith('<sqlalchemy.engine.result'):
            silk2 = '–ü—É—Å—Ç–æ'
        else:
            pass
        if str(silk3).startswith('<sqlalchemy.engine.result'):
            silk3 = '–ü—É—Å—Ç–æ'
        else:
            pass
        if str(silk4).startswith('<sqlalchemy.engine.result'):
            silk4 = '–ü—É—Å—Ç–æ'
        else:
            pass
        if str(silk5).startswith('<sqlalchemy.engine.result'):
            silk5 = '–ü—É—Å—Ç–æ'
        else:
            pass
        await session.commit()
        await msg.answer(f'–ü–æ—Ä—è–¥–æ–∫ –∫–∞–Ω–∞–ª–æ–≤\n1. {silk1}\n2. {silk2}\n3. {silk3}\n4. {silk4}\n5. {silk5}')
        await msg.answer("–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π '–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª', —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø–æ—Ä—è–¥–∫–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∫–∞–Ω–∞–ª–∞, —Å—Å—ã–ª–∫–∏, –∞–π–¥–∏ - —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª—ã\n–ù–∞–ø—Ä–∏–º–µ—Ä: –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª 1 https://t.me/channel_jomaska -1001726045986",
                         reply_markup=get_exit_menu_buttons())
        await msg.answer("–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π '–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–π –∫–∞–Ω–∞–ª', —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Å—Å—ã–ª–∫–∏\n–ù–∞–ø—Ä–∏–º–µ—Ä: –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–π –∫–∞–Ω–∞–ª https://t.me/channel_jomaska",
                         reply_markup=get_exit_menu_buttons())

@router.message(F.text.startswith('–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª'))
async def edit_channel_cmd(msg: Message, session: AsyncSession):
    if msg.from_user.id == int(Config.tg_bot.admin_id):
        text = msg.text
        text = text.replace("–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", '')
        text = text.split(' ')
        await msg.answer(f'–ù–æ–º–µ—Ä –∫–∞–Ω–∞–ª–∞: {text[1]}\n–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª: {text[2]}\n–ê–π–¥–∏ –∫–∞–Ω–∞–ª–∞: {text[3]}')
        try:
            channel = Channel(
            id=int(text[1]),
            silk=str(text[2]),
            id_channel=str(text[3])
            )
            await session.merge(channel)
            await session.commit()
        except:
            await msg.answer('–û—à–∏–±–∫–∞!')
        await msg.answer(f'–î–æ–±–∞–≤–ª–µ–Ω–æ!')
    
@router.message(F.text.startswith('–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–π –∫–∞–Ω–∞–ª'))
async def edit_channel_cmd(msg: Message, session: AsyncSession):
    if msg.from_user.id == int(Config.tg_bot.admin_id):
        text = msg.text
        text = text.replace("–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–π –∫–∞–Ω–∞–ª", '')
        text = text.split(' ')
        await msg.answer(f'–ù–æ–º–µ—Ä –∫–∞–Ω–∞–ª–∞: 6\n–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª: {text[1]}')
        try:
            channel = Channel(
            id=6,
            silk=str(text[1])
            )
            await session.merge(channel)
            await session.commit()
        except:
            await msg.answer('–û—à–∏–±–∫–∞!')
        await msg.answer(f'–î–æ–±–∞–≤–ª–µ–Ω–æ!')
    
@router.message(F.text == 'üîÆ –ì–æ—Ä–æ—Å–∫–æ–ø')
async def horo_cmd(msg: Message):
    await msg.answer('üîÆ –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è',
                     reply_markup=get_zodiac_buttons())

@router.message(F.text == 'üïØ –û–°–û–ë–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò')
async def horo_cmd(msg: Message):
    await msg.answer('üïØ <b>–ñ–µ–ª–∞–µ—à—å –Ω–µ—á—Ç–æ –±–æ–ª—å—à–µ–µ?</b>', parse_mode='HTML',
                     reply_markup=get_exit_menu_buttons())
    await msg.answer('üïØ –¢–æ–≥–¥–∞ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –ø–æ–ª—É—á–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –∑–¥–µ—Å—å',
                     reply_markup=get_nemeling_silk())
    #await msg.answer('–ë–µ–∑ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞ –≤ –º–µ–Ω—é –Ω–µ –º–æ–∂–µ—Ç –ø–æ—è–≤–∏—Ç—å—Å—è', reply_markup=get_exit_menu_buttons())

@router.message(F.text == 'üè† –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é')
async def exit_cmd(msg: Message):
    if msg.from_user.id == int(Config.tg_bot.admin_id):
        await msg.answer('üè† –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é',
                         reply_markup=get_admin_start_buttons())
    else:
        await msg.answer('üè† –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é',
                        reply_markup=get_start_buttons())

@router.message(F.text == 'üèµ –í–æ—Å—Ç–æ—á–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø')
async def vostok_horo_cmd(msg: Message):
    main_photo_horo_vostok = FSInputFile(r'c:\Users\–†–æ–º–∞–Ω\Pictures\Saved Pictures\photo_2023-09-04_14-50-59.jpg')
    await msg.answer_photo(main_photo_horo_vostok, caption='üé≤ –í—ã–±–µ—Ä–µ—Ç–µ –∂–∏–≤–æ—Ç–Ω–æ–µ –ø–æ –≥–æ–¥—É –≤–∞—à–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –≥–æ–¥',
                           reply_markup=get_inline_vostok_horo_buttons())

@router.message(F.text == 'üÄÑÔ∏è –ö–∞—Ä—Ç—ã —Ç–∞—Ä–æ')
async def taro_cmd_main(msg: Message):
    main_photo = FSInputFile(r'c:\Users\–†–æ–º–∞–Ω\Pictures\Saved Pictures\photo_2023-08-31_14-47-52.jpg')
    await msg.answer_photo(main_photo, caption='üÄÑÔ∏è –í—ã–±–µ—Ä–∏ –∫–∞—Ä—Ç—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ üëÄ',
                           reply_markup=get_inline_taro_buttons())

@router.message(F.text == 'üü£ –ú–∞–≥–∏—è —á–∏—Å–µ–ª')
async def taro_cmd_main(msg: Message):
    main_photo = FSInputFile(r'c:\Users\–†–æ–º–∞–Ω\Pictures\Saved Pictures\617bd66a70e01e4c9c0fde5475b4e632fe9dij.jpg')
    await msg.answer_photo(main_photo, caption='üü£ –ú–∞–≥–∏—è —á–∏—Å–µ–ª\n\nüé≤ –í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–µ —á–∏—Å–ª–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ –∏ –ø–æ–ª—É—á–∏—Ç–µ —Å–≤–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ',
                           reply_markup=get_inline_numbers_buttons())

@router.message(F.text == 'üíü –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å')
async def taro_cmd_main(msg: Message, state=FSMContext):
    main_photo = FSInputFile(r'c:\Users\–†–æ–º–∞–Ω\Pictures\Saved Pictures\photo_2023-09-06_18-05-53.jpg')
    await msg.answer_photo(main_photo, caption='üíü –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å\n\n–ú–µ–∂–¥—É ___ –∏ ___\n\nüé≤ –í—ã–±–µ—Ä–∏—Ç–µ –¥–≤–∞ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞',
                           reply_markup=get_inline_compatibility_buttons())
    await state.set_state(CompatibilityZodiac.first_zodiac)

@router.callback_query(F.data == 'delete')
async def delete_inl(callback: CallbackQuery, bot: Bot, session: AsyncSession):
    
    async def check_sub(channel_id: int) -> bool:
        try:
            channel = await session.execute(select(Channel.id_channel).where(Channel.id == channel_id))
            text = ''.join(str(c[0]) for c in channel)
            user = await bot.get_chat_member(chat_id=text, user_id=callback.from_user.id)
            return user.status != "left"
        except TelegramBadRequest:
            if text == '':
                return True
            return False
        
    sub1 = await check_sub(1)
    sub2 = await check_sub(2)
    sub3 = await check_sub(3)
    sub4 = await check_sub(4)
    sub5 = await check_sub(5)
    
    if all([sub1, sub2, sub3, sub4, sub5]): 
        await callback.message.delete()
        await callback.message.answer('–¢–µ–ø–µ—Ä—å —Å–æ –º–Ω–æ–π –º–æ–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å')
        if callback.from_user.id == int(Config.tg_bot.admin_id):
            await bot.send_message('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, –∞–¥–º–∏–Ω!',
                         reply_markup=get_admin_start_buttons(), chat_id=callback.from_user.id)
        else:
            main_photo = FSInputFile(r'c:\Users\–†–æ–º–∞–Ω\Pictures\Saved Pictures\photo_2023-01-18_01-40-17.jpg')
            await bot.send_photo(photo=main_photo, caption='–ü—Ä–∏–≤–µ—Ç! –Ø - –≥–æ—Ä–æ—Å–∫–æ–ø –±–æ—Ç ‚ú®\n\n–Ø –ø—Ä–µ–¥—Å–∫–∞–∂—É —Ç–≤–æ–π –¥–µ–Ω—å –Ω–∞ –∑–∞–≤—Ç—Ä–∞, –ø—Ä–æ–≤–µ—Ä—é –≤–∞—à—É —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º, –∞ —Ç–∞–∫–∂–µ —Å–¥–µ–ª–∞—é —Ä–∞—Å–∫–ª–∞–¥ –Ω–∞ –∫–∞—Ä—Ç–∞—Ö –¢–∞—Ä–æ üîÆ',
                        reply_markup=get_start_buttons(), chat_id=callback.from_user.id)
    else:
        await callback.answer("–¢—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è!", show_alert=True)
        
@router.callback_query(F.data == 'taro_random')
async def taro_send(callback: CallbackQuery, bot: Bot, session: AsyncSession):
    
    random_taro_name = random.choice(string_taro_name)
    
    photo_silk = await session.execute(select(Taro.silk).where(Taro.name == random_taro_name))
    desc_photo = await session.execute(select(Taro.desc).where(Taro.name == random_taro_name))
    name_photo = await session.execute(select(Taro.name).where(Taro.name == random_taro_name))
    
    await session.commit()
    
    for silk in photo_silk:
        photo_silk = silk[0]

    for desc in desc_photo:
        desc_photo = desc[0]    
        
    for name in name_photo:
        name_photo = name[0]    

    photo = FSInputFile(photo_silk)
    await bot.send_photo(photo=photo, caption=desc[0], chat_id=callback.from_user.id,
                         reply_markup=get_exit_menu_buttons())
    await callback.answer()

@router.callback_query(F.data == 'numb_random')
async def numb_send(callback: CallbackQuery, bot: Bot, session: AsyncSession):
    
    random_numb_id = random.randint(1, 50)
    
    desc_numb = await session.execute(select(NumberMagic.desc).where(NumberMagic.id == random_numb_id))
    
    # add_number1 = "–î—Ä–µ–≤–Ω—è—è –º—É–¥—Ä–æ—Å—Ç—å –≥–ª—É–±–æ–∫–æ —Å–∫—Ä—ã—Ç–∞ –≤ —Ç–≤–æ–µ–π –î–ù–ö, —Ä–∞—Å–∫—Ä–æ–π –µ–µ –∏ –æ–±—Ä–µ—Ç–µ—à—å –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω—É—é —Å–∏–ª—É."
    # add_number2 = "–°–∏–º–≤–æ–ª –Ω–∞ —Ç–≤–æ–µ–π —Ä—É–∫–µ —Å—Ç–∞–Ω–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º —Ç–≤–æ–µ–π –∑–∞—â–∏—Ç—ã –∏ —É–¥–∞—á–∏ –Ω–∞ –ø—É—Ç–∏ –∫ —É—Å–ø–µ—Ö—É."
    # add_number3 = "–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Ç—ã –ø–æ–ª—É—á–∏—à—å –ø–∏—Å—å–º–æ, –∫–æ—Ç–æ—Ä–æ–µ –∏–∑–º–µ–Ω–∏—Ç —Ç–≤–æ—é –∂–∏–∑–Ω—å –Ω–∞–≤—Å–µ–≥–¥–∞."
    # add_number4 = "–ü–æ–ª—É—á–∏—à—å –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–∫—Ä–æ–µ—Ç –¥–≤–µ—Ä—å –∫ –±–æ–ª—å—à–æ–º—É —É—Å–ø–µ—Ö—É."
    # add_number5 = "–í—Å—Ç—Ä–µ—á–∞ —Å –Ω–µ–∑–Ω–∞–∫–æ–º—Ü–µ–º –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –≤–∞–∂–Ω–æ–º—É –ø–æ–≤–æ—Ä–æ—Ç—É –≤ —Ç–≤–æ–µ–π –∂–∏–∑–Ω–∏."
    # add_number6 = "–ù–∞—Ö–æ–¥–∫–∞ –Ω–∞ —É–ª–∏—Ü–µ –ø—Ä–∏–Ω–µ—Å–µ—Ç —Ç–µ–±–µ –Ω–µ —Ç–æ–ª—å–∫–æ –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–µ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏–µ, –Ω–æ –∏ –¥—É—à–µ–≤–Ω–æ–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ."
    # add_number7 = "–¢–µ–±—è –∂–¥–µ—Ç –Ω–∞—Å—Ç–æ—è—â–∞—è –ª—é–±–æ–≤—å, –∫–æ—Ç–æ—Ä–∞—è –æ–∑–∞—Ä–∏—Ç —Ç–≤–æ—é –∂–∏–∑–Ω—å –∏ –ø—Ä–∏–Ω–µ—Å–µ—Ç –≥–∞—Ä–º–æ–Ω–∏—é."
    # add_number8 = "–¢—ã —Å–∫–æ—Ä–æ –Ω–∞–π–¥–µ—à—å –ø–æ—Ç–µ—Ä—è–Ω–Ω–æ–µ, —á—Ç–æ –¥–∞—Å—Ç —Ç–µ–±–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –º–Ω–æ–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã."
    # add_number9 = "–ó–∞–≥–∞–¥–∫–∞, —Å –∫–æ—Ç–æ—Ä–æ–π —Ç—ã —Å—Ç–æ–ª–∫–Ω–µ—à—å—Å—è, –ø–æ–º–æ–∂–µ—Ç —Ä–∞–∑–≥–∞–¥–∞—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω—É—é —Ç–∞–π–Ω—É —Ç–≤–æ–µ–π —Å–µ–º—å–∏."
    # add_number10 = "–¢—ã —Å–∫–æ—Ä–æ –æ—Å—É—â–µ—Å—Ç–≤–∏—à—å –¥–æ–ª–≥–æ–∂–¥–∞–Ω–Ω—É—é –º–µ—á—Ç—É, –±–ª–∞–≥–æ–¥–∞—Ä—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–π –ø–æ–º–æ—â–∏ –∏–∑ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞."


    # number1 = NumberMagic(
    #     id=41,
    #     desc=add_number1
    # )
    # number2 = NumberMagic(
    #     id=42,
    #     desc=add_number2
    # )
    # number3 = NumberMagic(
    #     id=3,
    #     desc=add_number3
    # )
    # number4 = NumberMagic(
    #     id=4,
    #     desc=add_number4
    # )
    # number5 = NumberMagic(
    #     id=5,
    #     desc=add_number5
    # )
    # number6 = NumberMagic(
    #     id=6,
    #     desc=add_number6
    # )
    # number7 = NumberMagic(
    #     id=7,
    #     desc=add_number7
    # )
    # number8 = NumberMagic(
    #     id=8,
    #     desc=add_number8
    # )
    # number9 = NumberMagic(
    #     id=9,
    #     desc=add_number9
    # )
    # number10 = NumberMagic(
    #     id=10,
    #     desc=add_number10
    # )
    
    # # await session.merge(number1)
    # # await session.merge(number2)
    # await session.merge(number3)
    # await session.merge(number4)
    # await session.merge(number5)
    # await session.merge(number6)
    # await session.merge(number7)
    # await session.merge(number8)
    # await session.merge(number9)
    # await session.merge(number10)
    # await session.commit()
    
    
    
    await session.commit()
    
    for desc in desc_numb:
        desc_numb = desc[0]    
    dop = 'üîÆ –í–∞—à–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ\n\nüí¨ '
    await bot.send_message(text=dop+desc[0], chat_id=callback.from_user.id,
                         reply_markup=get_exit_menu_buttons())
    await callback.answer()
       
@router.callback_query(CompatibilityZodiac.first_zodiac, F.data.in_(zodiac))
async def compatibility(callback: CallbackQuery, state=FSMContext):
    
    await state.update_data(first_zodiac=callback.data)
    await callback.answer('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ')
    await callback.message.edit_caption(caption=f'üíü –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å\n\n–ú–µ–∂–¥—É {callback.data} –∏ ___\n\nüé≤ –í—ã–±–µ—Ä–∏—Ç–µ –¥–≤–∞ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞',
                                        reply_markup=get_inline_compatibility_buttons())
    # await bot.edit_message_text(text="–¢–µ–ø–µ—Ä—å, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ç–æ—Ä–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞",
    #                     chat_id=callback.message.chat.id,
    #                     reply_markup=get_inline_compatibility_buttons())
    # await bot.send_message(text="–¢–µ–ø–µ—Ä—å, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ç–æ—Ä–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞",
    #                        chat_id=callback.from_user.id,
    #                        reply_markup=get_inline_compatibility_buttons())
    
    await state.set_state(CompatibilityZodiac.second_zodiac)
    # photo_silk = await session.execute(select(Taro.silk).where(Taro.name == random_taro_name))
    # desc_photo = await session.execute(select(Taro.desc).where(Taro.name == random_taro_name))
    # name_photo = await session.execute(select(Taro.name).where(Taro.name == random_taro_name))
    
    # await session.close()
    
    # for silk in photo_silk:
    #     photo_silk = silk[0]

    # for desc in desc_photo:
    #     desc_photo = desc[0]    
        
    # for name in name_photo:
    #     name_photo = name[0]    

    # photo = FSInputFile(photo_silk)
    # main_photo = FSInputFile(r'c:\Users\–†–æ–º–∞–Ω\Pictures\Saved Pictures\photo_2023-09-06_18-05-53.jpg')
    
    # await callback.message.delete()
    # await bot.send_photo(photo=main_photo, caption='üíü –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å\n\n–ú–µ–∂–¥—É –û–≤–µ–Ω –∏ ___\n\nüé≤ –í—ã–±–µ—Ä–∏—Ç–µ –¥–≤–∞ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞')
    # number = 1
    # await bot.send_photo(photo=photo, caption=desc[0], chat_id=callback.from_user.id)
    # await callback.answer()

@router.callback_query(CompatibilityZodiac.second_zodiac, F.data.in_(zodiac))
async def compatibility(callback: CallbackQuery, session: AsyncSession, state=FSMContext):
    user_data = await state.get_data()
    first = user_data['first_zodiac']
    second = callback.data

    id = await session.execute(select(Compatibility.id).where(Compatibility.first_zodiac == first, Compatibility.second_zodiac == second))
    desc = await session.execute(select(Compatibility.desc).where(Compatibility.first_zodiac == first, Compatibility.second_zodiac == second))
    channel = await session.execute(select(Channel.silk).where(Channel.id == 6))
    
    text = ''.join(str(c[0]) for c in channel)
    
    for id1 in id:
        id = id1[0]
        
    for desc1 in desc:
        desc = desc1[0]
        
    if str(desc).startswith('<sqlalchemy.engine.result'):
        id = await session.execute(select(Compatibility.id).where(Compatibility.first_zodiac == second, Compatibility.second_zodiac == first))
        desc = await session.execute(select(Compatibility.desc).where(Compatibility.first_zodiac == second, Compatibility.second_zodiac == first))

        for id1 in id:
            id = id1[0]
        for desc1 in desc:
            desc = desc1[0]
    else:
        pass
    await session.commit()
    await callback.answer('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ')
    await callback.message.edit_caption(caption=f'üíü –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å\n\n–ú–µ–∂–¥—É {first} –∏ {callback.data}\n\n{id}. {desc}')
    await callback.message.answer(f'–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ <a href="{text}">–∫–∞–Ω–∞–ª</a>', parse_mode='HTML',reply_markup=get_exit_menu_buttons())
    await state.clear()

@router.callback_query(F.data == 'delete_silk_and_id_1')
async def taro_send(callback: CallbackQuery, session: AsyncSession):
    
    delt = delete(Channel).where(Channel.id == 1)
    
    await session.execute(delt)

    await session.commit()
    await callback.answer(f'–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω 1 –∫–∞–Ω–∞–ª')
    
@router.callback_query(F.data == 'delete_silk_and_id_2')
async def taro_send(callback: CallbackQuery, session: AsyncSession):
    
    delt = delete(Channel).where(Channel.id == 2)
    
    await session.execute(delt)

    await session.commit()
    await callback.answer(f'–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω 2 –∫–∞–Ω–∞–ª')
    
@router.callback_query(F.data == 'delete_silk_and_id_3')
async def taro_send(callback: CallbackQuery, session: AsyncSession):
    
    delt = delete(Channel).where(Channel.id == 3)
    
    await session.execute(delt)

    await session.commit()
    await callback.answer(f'–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω 3 –∫–∞–Ω–∞–ª')
    
@router.callback_query(F.data == 'delete_silk_and_id_4')
async def taro_send(callback: CallbackQuery, session: AsyncSession):
    
    delt = delete(Channel).where(Channel.id == 4)
    
    await session.execute(delt)

    await session.commit()
    await callback.answer(f'–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω 4 –∫–∞–Ω–∞–ª')
    
@router.callback_query(F.data == 'delete_silk_and_id_5')
async def taro_send(callback: CallbackQuery, session: AsyncSession):
    
    delt = delete(Channel).where(Channel.id == 5)
    
    await session.execute(delt)

    await session.commit()
    await callback.answer(f'–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω 5 –∫–∞–Ω–∞–ª')
    
@router.message(CreatePosts.text)
async def compatibility(msg: Message, state=FSMContext):
    if msg.from_user.id == int(Config.tg_bot.admin_id):
        await state.update_data(text=msg.text)
        await state.set_state(CreatePosts.choise)
        await msg.answer('–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–æ–µ –º–µ–¥–∏–∞ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ', reply_markup=get_choise_media())
        
@router.callback_query(CreatePosts.choise, F.data == 'photo_media')
async def compatibility(callback: CallbackQuery, state=FSMContext):
    if callback.from_user.id == int(Config.tg_bot.admin_id):
        await callback.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ', show_alert=True)
        await state.set_state(CreatePosts.photo)

@router.callback_query(CreatePosts.choise, F.data == 'video_media')
async def compatibility(callback: CallbackQuery, state=FSMContext):
    if callback.from_user.id == int(Config.tg_bot.admin_id):
        await callback.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ', show_alert=True)
        await state.set_state(CreatePosts.video)
        
@router.callback_query(CreatePosts.choise, F.data == 'none_media')
async def compatibility(callback: CallbackQuery, state=FSMContext):
    if callback.from_user.id == int(Config.tg_bot.admin_id):
        await callback.answer('–ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú', show_alert=True)
        await state.set_state(CreatePosts.data1)
        
@router.message(CreatePosts.photo)
async def compatibility(msg: Message, bot: Bot, state=FSMContext):
    if msg.from_user.id == int(Config.tg_bot.admin_id):
        await state.update_data(photo=msg.text)

        photo = msg.photo[-1].file_id
        file = await bot.get_file(photo)
        file_path = file.file_path
        saved_file_path = rf"c:\Users\–†–æ–º–∞–Ω\Pictures\Saved Pictures/{photo}.jpg"
        
        await state.update_data(photo=saved_file_path)
        await bot.download_file(file_path, saved_file_path)
        await state.set_state(CreatePosts.data1)
        await msg.answer('–ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú')
        
@router.message(CreatePosts.video)
async def compatibility(msg: Message, bot: Bot, state=FSMContext):
    if msg.from_user.id == int(Config.tg_bot.admin_id):
        await state.update_data(video=msg.text)
        video = msg.video.file_id
        
        file = await bot.get_file(video)
        file_path = file.file_path
        saved_file_path = rf"c:\Users\–†–æ–º–∞–Ω\Pictures\Saved Pictures/{video}.mp4"
        
        await state.update_data(video=saved_file_path)
        await bot.download_file(file_path, saved_file_path)
        await state.set_state(CreatePosts.data1)
        await msg.answer('–ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú')
            
@router.message(CreatePosts.data1)
async def compatibility(msg: Message, bot: Bot, session: AsyncSession, state=FSMContext):
    if msg.from_user.id == int(Config.tg_bot.admin_id):
        await state.update_data(data1=msg.text)
        user_data = await state.get_data()
        try:
            video = user_data['video']
        except:
            video = ''
        try:
            photo = user_data['photo']
        except:
            photo = ''
        text = user_data['text']
        data1 = user_data['data1']
        #date = datetime.strptime(data1, '%d.%m.%Y %H:%M')
        #scheduler.add_job(send_broadcast_message, 'date', run_date=date, args=[text, session, bot, photo, video])
        
        # await msg.answer('–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É.')
        # try:
        #     scheduler.start()
        # except:
        #     pass
        n = '\n\n'
        create = '–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?'
        if photo != '':
            file1 = FSInputFile(photo)
            await bot.send_photo(photo=file1, caption=text, chat_id=Config.tg_bot.admin_id, parse_mode='HTML')
            await bot.send_message(text=data1 + n + create, chat_id=Config.tg_bot.admin_id, reply_markup=get_end_send_ras())
        if video != '':
            file1 = FSInputFile(video)
            await bot.send_video(video=file1, caption=text, chat_id=Config.tg_bot.admin_id, parse_mode='HTML')
            await bot.send_message(text=data1 + n + create, chat_id=Config.tg_bot.admin_id, reply_markup=get_end_send_ras())
        if photo == '' and video == '':
            await bot.send_message(text=text, chat_id=Config.tg_bot.admin_id, parse_mode='HTML')
            await bot.send_message(text=data1 + n + create, chat_id=Config.tg_bot.admin_id, reply_markup=get_end_send_ras())
        #await bot.send_message()
        
        await state.set_state(CreatePosts.end)

@router.callback_query(CreatePosts.end, F.data == 'end_ras_yes')
async def compatibility(callback: CallbackQuery, bot: Bot, session: AsyncSession, state=FSMContext):        
    if callback.from_user.id == int(Config.tg_bot.admin_id):
        user_data = await state.get_data()
        try:
            video = user_data['video']
        except:
            video = ''
        try:
            photo = user_data['photo']
        except:
            photo = ''
        text = user_data['text']
        data1 = user_data['data1']
        date = datetime.strptime(data1, '%d.%m.%Y %H:%M')
        scheduler.add_job(send_broadcast_message, 'date', run_date=date, args=[text, session, bot, photo, video])
        
        await callback.message.edit_text('–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É')
        #await callback.answer('–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É', show_alert=True)
        try:
            scheduler.start()
        except:
            pass
        await state.clear()
        
@router.callback_query(CreatePosts.end, F.data == 'end_ras_no')
async def compatibility(callback: CallbackQuery, bot: Bot, session: AsyncSession, state=FSMContext):        
    if callback.from_user.id == int(Config.tg_bot.admin_id):
        await callback.message.edit_text('–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞')
        #await callback.answer('–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.', show_alert=True)
        await state.clear()
    
async def send_broadcast_message(text, session, bot, photo, video):
    users = (await session.scalars(select(User.user_id))).fetchall()
    session: AsyncSession
    await session.close()
    for user in users:
        try:
            if photo != '':
                file1 = FSInputFile(photo)
                await bot.send_photo(photo=file1, caption=text, chat_id=user, parse_mode='HTML')
            if video != '':
                file1 = FSInputFile(video)
                await bot.send_video(video=file1, caption=text, chat_id=user, parse_mode='HTML')
            if photo == '' and video == '':
                await bot.send_message(text=text, chat_id=user, parse_mode='HTML')
        except:
            logging.info(f'\n\nError {user} send message\n')
    try:
        os.remove(photo)
    except:
        pass
    try:
        os.remove(video)
    except:
        pass